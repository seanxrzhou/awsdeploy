{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Deploy WebSphere Application Server v8 on AWS ",
	"Parameters": {
		"KeyName": {
			"Description": "key for SSH access",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "Must be an existing key pair."
		},
		"WASimage": {
			"Description": "The pre-built WebSphere Base image",
			"Type": "String",
			"Default": "was8.zip"
		},
		"JEEapp": {
			"Description": "The name of J2EE applictaion ear.",
			"Type": "String",
			"Default": "pbw-ear.ear"
		},
		"DBarchive": {
			"Description": "The data file to import, e.g, a Derby database archive",
			"Type": "String",
			"Default": "pbw-db.jar"		
		},
		"RepoSource": {
			"Description": "The Source to download the software, e.g., s3://s3logme/img.",
			"Type": "String",
			"Default": "s3://s3logme/img"			
		}
	},
	"Mappings": {
		"EC2RegionMap": {
			"us-east-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-14c5486b"},
			"us-east-2": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-922914f7"},
			"us-west-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-25110f45"},
			"us-west-2": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-e251209a"}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "172.31.0.0/16",
				"EnableDnsHostnames": "true"
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {"Ref": "VPC"},
				"InternetGatewayId": {"Ref": "InternetGateway"}
			}
		},
		"SubnetA": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
				"CidrBlock": "172.31.35.0/24",
				"VpcId": {"Ref": "VPC"}
			}
		},
		"SubnetB": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
				"CidrBlock": "172.31.36.0/24",
				"VpcId": {"Ref": "VPC"}
			}
		},
		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {"Ref": "VPC"}
			}
		},
		"RouteTableAssociationA": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetA"},
				"RouteTableId": {"Ref": "RouteTable"}
			}
		},
		"RouteTableAssociationB": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetB"},
				"RouteTableId": {"Ref": "RouteTable"}
			}
		},
		"RoutePublicNATToInternet": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {"Ref": "RouteTable"},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {"Ref": "InternetGateway"}
			},
			"DependsOn": "VPCGatewayAttachment"
		},
		"NetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {"Ref": "VPC"}
			}
		},
		"SubnetNetworkAclAssociationA": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetA"},
				"NetworkAclId": {"Ref": "NetworkAcl"}
			}
		},
		"SubnetNetworkAclAssociationB": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetB"},
				"NetworkAclId": {"Ref": "NetworkAcl"}
			}
		},
		"NetworkAclEntryIngress": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {"Ref": "NetworkAcl"},
				"RuleNumber": "100",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"NetworkAclEntryEgress": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {"Ref": "NetworkAcl"},
				"RuleNumber": "100",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"PBWLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
				"LoadBalancerName": "pbw-elb",
				"Policies": [{ 
					"PolicyName": "PBWELBSecurityPolicy", 
					"PolicyType": "SSLNegotiationPolicyType", 
						"Attributes": [{ "Name": "Reference-Security-Policy", 
						"Value": "ELBSecurityPolicy-2015-05" }]
				}],
				"Listeners": [{
					"LoadBalancerPort": "443",
					"Protocol": "HTTPS",					
					"InstancePort": "9080",
					"InstanceProtocol": "HTTP",
					"SSLCertificateId" : "arn:aws:acm:us-east-1:176707803724:certificate/c3971f7b-48e2-452e-a5d7-82015942cc21",
					"PolicyNames" : ["PBWELBSecurityPolicy"]
				}],					
				"HealthCheck": {
					"HealthyThreshold": "2",
					"Interval": "5",
					"Target": "TCP:9080",
					"Timeout": "3",
					"UnhealthyThreshold": "2"
				},
				"SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}],
				"Scheme": "internet-facing",
				"CrossZone": "true"
			}
		},
		"LoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "PBW web load balancer",
				"VpcId": {"Ref": "VPC"},
				"SecurityGroupIngress": [{
					"CidrIp": "0.0.0.0/0",
					"FromPort": 443,
					"IpProtocol": "tcp",
					"ToPort": 443
				}]
			}
		},
	    "WebAppServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable the SSH and web admin access and web application access",
				"VpcId": {"Ref": "VPC"},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "9443",
						"ToPort": "9443",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "9043",
						"ToPort": "9043",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "9080",
						"ToPort": "9080",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"ServiceAccessProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{"Ref": "AccessS3"}]
			}
		},
		"AccessS3": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "s3access",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
                           "Action": [
                               "s3:Get*",
                               "s3:List*"
                                ],
                        "Effect": "Allow",
                        "Resource": "*"
						}]
					}
				}]
			}
		},
		"PBWLaunchConfiguration": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"InstanceType": "t2.micro",
				"SecurityGroups": [{"Ref": "WebAppServerSecurityGroup"}],
				"IamInstanceProfile": {"Ref": "ServiceAccessProfile"},				
				"KeyName": {"Ref": "KeyName"},
				"AssociatePublicIpAddress": true,				
				"ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxAMIHVMEBSBacked64bit"]},
				"UserData": {"Fn::Base64": {"Fn::Join": ["", [
					"#!/bin/bash -ex\n",
					"cd /tmp\n",
					"echo Download start...\n",
					"Repo=", {"Ref": "RepoSource"}, "\n",
					"DBar=", {"Ref": "DBarchive"}, "\n",
					"JEEa=",{"Ref": "JEEapp"}, "\n",
					"WASi=",{"Ref": "WASimage"}, "\n",
					"aws s3 cp ${Repo}/${DBar} ${DBar} \n",
					"aws s3 cp ${Repo}/${JEEa} ${JEEa} \n",
					"aws s3 cp ${Repo}/${WASi} ${WASi} \n",					
					"echo Download finish.\n",
					"wget https://s3.amazonaws.com/s3logme/img/was8deploy.sh && chmod 750 was8deploy.sh \n",
					"./was8deploy.sh ${WASi} ${DBar} ${JEEa} \n",
					"rm -f was8deploy.sh; echo Deploy finish at `date`.\n"
				]]}}
			}
		},
		"AutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"LoadBalancerNames": [{"Ref": "PBWLoadBalancer"}],
				"LaunchConfigurationName": {"Ref": "PBWLaunchConfiguration"},
				"MinSize": "2",
				"MaxSize": "2",
				"DesiredCapacity": "2",
				"VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
				"HealthCheckGracePeriod": "300",
				"HealthCheckType": "EC2"				
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT10M"
				}
			}
		}
	},
	"Outputs": {
		"WebAppURL": {
			"Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["PBWLoadBalancer", "DNSName"]}]]},
			"Description": "The LB URL"
		}
	}
}
